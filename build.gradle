plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.165'
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

//neoForge {
//    version = project.neo_version
//
//    parchment {
//        mappingsVersion = project.parchment_mappings_version
//        minecraftVersion = project.parchment_minecraft_version
//    }
//}

minecraft.accessTransformers.files(
        file('src/main/resources/META-INF/accesstransformer.cfg')
)

runs {
    configureEach {
        systemProperty 'neoforge.logging.markers', 'REGISTRIES'

        systemProperty 'neoforge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'neoforge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url 'https://modmaven.dev/' }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

//    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}"
//    compileOnly "mezz.jei:jei-${minecraft_version}-forge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

    implementation "mekanism:Mekanism:${mekanism_version}"
    runtimeOnly "mekanism:Mekanism:${mekanism_version}:additions"
    runtimeOnly "mekanism:Mekanism:${mekanism_version}:generators"
    runtimeOnly "mekanism:Mekanism:${mekanism_version}:tools"
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

//    filesMatching(['META-INF/mods.toml']) {
//        expand replaceProperties + [project: project]
//    }
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}

sourceSets.main.resources.srcDir generateModMetadata
// To avoid having to run "generateModMetadata" manually, make it run on every project reload
//neoForge.ideSyncTask generateModMetadata

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
